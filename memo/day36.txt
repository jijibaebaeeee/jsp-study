복습 -> GET/POST 방식 -> forward, redirect -> JSP 헤더/푸터 -> JSP 태그 -> JSTL/EL -> MyBatis

0. 복습
  1) 서블릿과 JSP
	서블릿 : JAVA 코드 안에 HTML
	JSP : HTML 코드 안에 JAVA
			<% %>를 사용해서 JAVA코드를 사용했음
    ※ JSP(Java Server Page)
	서블릿 클래스처럼 웹 컨테이너가 관리하며 웹 컨테이너가 JSP를 실행시킬 때 서블릿으로 변환하여 실행한다

  2) WEB.xml 파일
	서블릿 파일을 mapping 하기 위해서 사용
	서블릿 어노테이션 = @WebServlet()
	@WebServlet() 어노테이션 대신 이 서블릿의 경로를 알려줄 수 있도록 작성하는 파일

	서블릿과 url 매핑
	<servlet>
		<servlet-name></servlet-name>
		<servlet-class></servlet-class>

	</servlet>
	<servlet-mapping>
		<servlet-name></servlet-name>   <- 서블릿 파일명을 적는다
		<url-pattern></url-pattern>     <- 서블릿 경로를 적는다
	</servlet-mapping>

  3) web.xml 파일 사용할 때의 요청(request) 흐름
    - 클라이언트가 요청(request)를 보낸다
    - 웹서버가 사용자의 request을 보낸 URL을 검사하여 어떤 서블릿이 request를 처리해야하는지 결정한다
    - request 요청이 정적페이지를 원한다면 웹서버는 자체적으로 처리하여 응답(response)을 클라이언트에게 보내준다
    - request 요청이 동적페이지를 원한다면 웹서버는 서블릿 컨테이너의 도움을 받는다
    - 서블릿 컨테이너는 web.xml파일에서 URL에 해당하는 서블릿을 찾아서 실행한다
    - 서블릿은 request를 처리하여 서블릿컨테이너에게 전달하고 서블릿 컨테이너는 웹서버로 전달한다
    - 최종적으로 웹서버는 클라이언트에게 response를 보낸다

1. GET 방식과 POST 방식
  1) GET 방식(민감하지 않은 데이터를 전달할 때 사용) ? 붙음
	데이터 전달 방식 : 주소(URL)에 데이터를 쿼리스트링 형태로 추가하여 서버로 전송
	구조 : http://www.koreait.com/page?key1=value1&key2=value2

	속도 : URL에 데이터를 추가해 전송하므로 요청속도가 빠름
	길이제한 : URL의 길이에 따라 데이터 전송크기가 제한된다.(일반적으로 2048자)
	데이터 노출 : 데이터가 URL에 그대로 노출되므로 민감정보(비밀번호, 개인정보 등)를 전송하면 안됨
	캐싱 및 북마크 : 브라우저가 URL을 캐싱하거나 북마크에 저장할 수 있음
		     동일한 요청을 여러번 반복하는 경우 적합
	사용 : 민감하지 않은 데이터 전달
	      ex) 페이지번호, 검색어

  2) POST 방식(민감한 데이터를 전달할 때 사용) 아무것도 붙지 않음
	데이터 전달 방식 : 데이터가 요청(request) 본문(body)에 포함되어 서버로 전송
		      클라이언트와 서버간에 데이터가 URL에 드러나지 않음
	속도 : GET 방식보다 느리지만, 대량의 데이터를 처리할 수 있음
	길이제한 : 이론적으로 제한이 없지만, 웹서버와 브라우저 설정에 따라 제한(일반적으로 몇 MB)이 있을 수 있음
	데이터 노출 : 데이터가 요청 본문에 포함디므로 URL에 나타나지 않음
	캐싱 : 브라우저가 POST 요청을 캐싱하지 않음 -> 데이터를 다시 전송하도록 설계
	사용 : 민감하거나 대용량 데이터를 전송
	      ex) 로그인, 회원가입, 글쓰기

2. forward와 redirect
  1) forward
	작동방식 : request.getRequestDispatcher("파일경로").forward(request, response);
	서버가 받은 요청(request)을 그대로 유지하며 서버 내부에서 다른 리소스로 이동
	클라이언트의 요청 데이터와 응답 데이터가 유지됨

  특징 
    1. URL의 변화가 없다
    2. 보안 : 요청 데이터가 유지되므로, 서버 내부 로직 처리후 민감한 정보도 안전하게 처리 가능
	     클라이언트에게 노출되지 않아 안전한 내부 작업에 적합
    3. 서버 부담 : 서버 내부에서만 작업하므로 부담이 적음

  2) redirect
	작동방식 : response.sendRedirect("URL경로");
	서버가 클라이언트 브라우저에게 새 URL로 이동하라고 요청
	클라이언트는 새로운 요청을 만들어 해당 URL로 접근

  특징
    1. URL 변화가 있다 : 브라우저의 URL이 변경되므로 사용자가 이동한 경로를 알 수 있음
    2. 데이터 유지 불가 : 기존 요청(request) 데이터는 소멸 -> 새로운 요청만 서버에 전달
    3. 보안 : 민감한 데이터를 처리한 후 클라이언트의 새 요청으로 이동시켜 데이터 재전송 방지
	     보안성이 향상되며, 민감한 데이터가 URL에 포함되지 않음
    4. 서버 부담 : 클라이언트가 새 요청을 하므로 서버 부담이 증가


3. 헤더, 푸터(header, footer)
	헤더(header), 푸터(footer)를 관리하는 방법은 코드의 재사용성과 유지보수를 위해 중요하다
	헤더와 푸터를 각각 독립적인 JSP 파일로 분리하고 필요할 때마다 포함할 수 있다.

[실습]
1. day02_task 라는 웹 프로젝트를 만든다
   url 루트경로는 /task이다
   반드시 web.xml 파일을 이용한다

2. index.jsp 에서 사용자에게 이름과 나이를 입력받고 접속이라는 버튼을 누르면 get방식을 사용하여 MyServlet1으로 요청이 간다.
   result.jsp에 이름과 나이를 출력하는데 forward 방식으로 이동한다

   result.jsp 결과화면
   000님 환영합니다
   000님의 2025년 나이는 00살 입니다
   
3. login.jsp에서 아이디와 비밀번호를 입력받아 로그인 버튼을 누르면 post 방식을 사용하여 MyServlet2로 요청이 간다.

4. com.serlvetTask.app 패키지에 MyServlet1과 MyServlet2를 만든다
   url 경로는 각각 resultServlet1, resultServelt2이다

5. index.jsp 파일에서 성별을 선택할 라디오버튼 3개를 만들어서 result.jsp 페이지에 결과 출력하기
   (선택안함, 남자, 여자 라디오버튼)

6. 취미를 선택할 수 있는 체크박스를 만들어서 result.jsp 페이지에 결과 출력하기
   (취미는 4개 이상)












	


























